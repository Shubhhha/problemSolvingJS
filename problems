Q1.Write a function that returns the reverse of a string?
Solution 1. 

const string ='reactnative'
const reverse=(str)=>{
    let rev = ''
    const arr = str.split('')
    for(var i=arr.length-1 ; i>=0 ; i--){
        rev = rev + arr[i]
    }
    return rev 
   
}

console.log(reverse(string))

Solution 2.

const string ='reactnative'

const reverse=(str)=>{
    let rev = ''
    
    for(var i=str.length-1 ; i>=0 ; i--){
        rev = rev + str[i]
    }
    return rev 
   
}

console.log(reverse(string))

Solution 3.

const reverse =(str)=>{
    return str.split('').reverse().join('')
}

console.log(reverse(str))
******************************************************Question 2***************************************************************************
Write a function that calculate factorial of a given number.
solution 1.

const num = 4;
const factorial =(num)=>{
    let fact = 1
    for(var i=1 ;i<=num ; i++){
        fact = fact*i
    }
    return fact
}

console.log(factorial(num))

solution 2  (recursion)
const num = 4;
 let fac = 1
const factorial =(num)=>{
     fac = fac*num
    if(num<=1) return fac
  return  factorial(num-1)
}

console.log(factorial(num))

********************************************************Question 3*************************************************************************
Write a functoin that tells if provided year is a leap year or not
solution 1.
const year =1601

const leapYear =(year)=>{
    return year%4===0
}

console.log(leapYear(year));

********************************************************Question 4*************************************************************************
Write a function that calculates and prints the sum of the digits of a given number.
Solution 1.
const num = 456 ;
const sumOfDigit=(n)=>{
    const string =n.toString()
    console.log(typeof string)
    const arr = string.split('')
    console.log(arr);
    let sum =0
    for(var i=0;i<=arr.length-1 ; i++){
        sum = sum + parseInt(arr[i]);
    }
    return sum;
}


console.log(sumOfDigit(num));

Solution 2.
const num = 29 ;
const sumOfDigit=(n)=>{
    const string =n.toString()
    let sum =0
    for(var x of string) sum+=parseInt(x);
    return sum;
}
console.log(sumOfDigit(num));

Solution 3.
const sum=(n)=>{
    if(n==0) return 0
   return n %10 + sum(Math.floor(n/10))
}

console.log(sum(digit))


Solution 4.
const num=145
const sumOfDigits=(n)=>{
    const arr= n.toString().split('')
    const sum = arr.reduce((initial,first,index,arr)=>{
       return initial+parseInt(first)
    },0)
    return sum
}

console.log(sumOfDigits(num))

**************************************Question 5***************************************************************

what is th output of this 
console.log(12**2)

**************************************Question 6***************************************************************

const test=()=>{
    salary  = 200;
    console.log(salary)
}

test() // output is 200 
this means that salary is being treated as an implicit global variable. In strict mode, this would throw an error, but in non-strict mode,
it creates a variable in the global scope.

**************************************Question 7***************************************************************

const test =()=>{
    console.log(test.abc)
}
test();

test.abc = 200
test.abc = 400
test();

 In JavaScript, functions are objects, so you can add properties to them just like you would with any other object.
You first set test.abc to 200, then you overwrite it and set test.abc to 400.


**************************************Question 8***************************************************************
console.log({}=={})
console.log({}==={})

why false ?

New Object Instances: Each time you use {}, you are creating a new object instance. So, when you do {} == {} or {} === {},
you are comparing two separate objects that have different references in memory.

**************************************Question 9***************************************************************
Shallow Copy
A shallow copy creates a new object but does not create copies of nested objects.
Instead, it copies references to the nested objects.
This means that if the original object has nested objects,
changes to those nested objects in the copied object will affect the original object.

let original = {
    name: 'Alice',
    details: {
        age: 25,
        city: 'Wonderland'
    }
};

let shallowCopy = { ...original };

// Modifying the nested object in the shallow copy
shallowCopy.details.age = 30;

console.log(original.details.age); // Outputs: 30
console.log(shallowCopy.details.age); // Outputs: 30


Example of Deep Copy
A deep copy creates a new object and recursively copies all nested objects.
This means that changes to the nested objects in the copied object do not affect the original object.
let original = {
    name: 'Alice',
    details: {
        age: 25,
        city: 'Wonderland'
    }
};

// Create a deep copy
let deepCopy = JSON.parse(JSON.stringify(original));

// Modify the deep copy
deepCopy.details.age = 30;

console.log(original.details.age); // Outputs: 25 (original remains unchanged)
console.log(deepCopy.details.age); // Outputs: 30 (deep copy reflects change)


-------------------------
const _ = require('lodash'); // Make sure to install lodash

let original = {
    name: 'Alice',
    details: {
        age: 25,
        city: 'Wonderland',
        hobbies: ['reading', 'traveling']
    }
};

// Create a deep copy using Lodash
let deepCopy = _.cloneDeep(original);

// Modify the deep copy
deepCopy.details.hobbies[0] = 'writing';

console.log(original.details.hobbies[0]); // Outputs: 'reading' (original remains unchanged)
console.log(deepCopy.details.hobbies[0]); // Outputs: 'writing' (deep copy reflects change)

**************************************Question 10***************************************************************
let a = {
    name :'himanshu'
}

let b = {
    ...a
}
console.log(b)
b.name = 'shubham'
console.log(a.name)

**************************************Question 11***************************************************************
let a = 10;
let b = new Number(10);
let c = 10

console.log(a===b);
console.log(b===c);
The comparisons return false because a and c are primitive types,
while b is an object. Strict equality requires both the type and value to match, and in this case, they do not.


**************************************Question 12***************************************************************

function test(record)
{
    if(record=={age:28}){
        console.log('you are an adult');
    }else if(record === {age:28}){
        console.log('you are still an adult')
    }else{
        console.log('no records');
    }
}

test({age:28})
In JavaScript, objects are compared by reference, not by value. 
This means that even if two objects have the same properties and values,
they are considered different if they are not the same reference in memory.

**************************************Question 13***************************************************************
console.log(+true)
The + operator is the unary plus operator, which converts its operand into a number.
true is a boolean value. When converted to a number, true becomes 1.
2. console.log(!'test');
The ! operator is the logical NOT operator, which negates the truthiness of its operand.
The string 'test' is a non-empty string, and in JavaScript, non-empty strings are considered truthy.
When you apply the ! operator to a truthy value, it converts it to false.

**************************************Question 14***************************************************************
create a fn 

let str = 'abcdef';
let str2 = 123;

// output a1b2c3def

let str = 'abc'
let str = 123456
// output  a1b2c3456
console.log(compare('abcdef',123));
console.log(compare('abc',123456));

**************************************Question 15***************************************************************

1.Advantage of react.
2.React native localisation.
3.Life cycle methods.
4.synthetic events.
5. Drawback of react native
6. React native testing.
7.Unit testing.
8.CI/CD pipeline


**************************************Question 16***************************************************************

 Write a JavaScript program to get the current date.  
Expected Output :
mm-dd-yyyy, mm/dd/yyyy or dd-mm-yyyy, dd/mm/yyyy

solution: 

const time =()=>{
     const date = new Date();
     var dd = date.getDate();
     var month = date.getMonth();
     var year = date.getFullYear();
       if(dd <= 9){
            dd = `0${dd}`
       }
    return `${dd}-${month}-${year}`;
}
console.log(time());


**************************************Question 17***************************************************************

// 1. Write a JavaScript program to compare two objects to determine if the first contains equivalent property values to the second one.


const matches =(obj1, obj2)=>{
//   const output =  Object.keys(obj2).every((item)=>obj1.hasOwnProperty(item))
    const output =  Object.keys(obj1).every((item)=>obj2.hasOwnProperty(item) && obj1[item] === obj2[item])
   console.log(output);
   return output
}


console.log(matches({ hair: 'long', beard: true }, 
{ age: 26, hair: 'long', beard: true }));


**************************************Question 18***************************************************************


//Write a JavaScript program to target a given value in a nested JSON object based on the given key.
// Use the in operator to check if target exists in obj.
 //If found, return the value of obj[target].
//Otherwise use Object.values(obj) and Array.prototype.reduce() to recursively call dig on each nested object until the first matching key/value pair is found.

const data = {
  level1: {
    level2: {
      level3: 'some data'
    }
  }
};

const test=(dd,target)=>{
     console.log('dd',dd)
   const keyExist = target in dd
   console.log('keyExist',keyExist)
   if(keyExist){
        return dd[target];
   }else{
     return   Object.values(dd).reduce((acc , val )=>{
           console.log('acc',acc)
           if(acc !== undefined) return acc 
           if (typeof val === 'object') return test(val,target)
       },undefined)
   }
   
}








**************************************Question 19***************************************************************
Que. find out the lowwest and highest of the string ->     IS IT THE COADING
o/p -> lowest {'IS','IT'} , highest {'coading'}

Que. a = [1,4,6,1,3,6,4,5,7,3,4,6 ,3]
ifk=3 o/p [3,4]
if k=2 o/p [1] because 1 is 2 time











